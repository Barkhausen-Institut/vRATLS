(* File automatically generated by Hacspec *)
From Hacspec Require Import Hacspec_Lib MachineIntegers.
From Coq Require Import ZArith.
Import List.ListNotations.
Open Scope Z_scope.
Open Scope bool_scope.

Require Import Rng.
Export Rng.

Notation "'t_Nat_t'" := int64.

(*Not implemented yet? todo(item)*)

(*Not implemented yet? todo(item)*)

Definition apply (f : F) (sk : int64) : int64 :=
  f_call_once f sk.

Definition example_function (sk : int64) : int64 :=
  sk.+(@repr WORDSIZE64 0).

Definition key_gen (_ : unit) : int64 × int64 :=
  let '(_,out) := f_gen (thread_rng tt) : t_ThreadRng_t × int64 in
  let sk := out : int64 in
  let '(_,out) := f_gen (thread_rng tt) : t_ThreadRng_t × int64 in
  let pk := out : int64 in
  (sk,pk).

Definition main (_ : unit) : unit :=
  let '(sk,pk) := key_gen tt : int64 × int64 in
  let _ := v__print (impl_2__new_v1 (unsize (array_from_list [Public Key (pk): ;
      
])) (unsize (array_from_list [impl_1__new_display pk]))) : unit in
  let _ := tt : unit in
  let result := apply example_function sk : int64 in
  let _ := v__print (impl_2__new_v1 (unsize (array_from_list [Result: ;
      
])) (unsize (array_from_list [impl_1__new_display result]))) : unit in
  let _ := tt : unit in
  tt.
